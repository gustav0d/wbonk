"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Represents an account with balance"""
type Account implements Node {
  """The ID of an object"""
  id: ID!
  accountName: String
  balance: String
  user: User!
  deletedAt: String

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input CreateTransactionInput {
  amount: Int!
  receiverAccountId: String!

  """Unique key to prevent duplicate transactions."""
  idempotencyKey: String!
  clientMutationId: String
}

type CreateTransactionPayload {
  transaction: Transaction
  originAccountUpdatedBalance: Int
  error: FieldError

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

"""
An object containing an error message and the field the error belongs to
"""
type FieldError {
  field: String
  message: String
}

"""Represents a ledger entry for financial transactions"""
type Ledger implements Node {
  """The ID of an object"""
  id: ID!
  description: String

  """Amount of the transaction (positive for credit, negative for debit)"""
  amount: Int

  """Account balance after this transaction"""
  balance: Int

  """Type of ledger entry (CREDIT or DEBIT)"""
  transactionType: String

  """The transaction associated with this ledger entry"""
  transaction: Transaction

  """The account associated with this ledger entry"""
  account: User

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type LedgerConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LedgerEdge]!
}

"""An edge in a connection."""
type LedgerEdge {
  """The item at the end of the edge."""
  node: Ledger

  """A cursor for use in pagination."""
  cursor: String!
}

type Mutation {
  userSignUp(input: UserSignUpMutationInput!): UserSignUpMutationPayload
  userSignIn(input: UserSignInMutationInput!): UserSignInMutationPayload
  createTransaction(input: CreateTransactionInput!): CreateTransactionPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  myAccount: Account
  users(after: String, first: Int, before: String, last: Int): UserConnection
  transactions(after: String, first: Int, before: String, last: Int): TransactionConnection
  ledgerEntries(after: String, first: Int, before: String, last: Int): LedgerConnection
}

"""Represents a transaction"""
type Transaction implements Node {
  """The ID of an object"""
  id: ID!

  """Total amount of the transaction in cents"""
  amount: Int!
  originAccount: Account
  receiverAccount: Account
  status: String
  paymentType: String

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type TransactionConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a user"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  email: String

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type UserConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String!
}

input UserSignInMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignInMutationPayload {
  me: User
  token: String
  error: FieldError

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserSignUpMutationInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignUpMutationPayload {
  me: User
  account: Account
  token: String
  error: FieldError

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

